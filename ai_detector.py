import json
import os
from openai import OpenAI

class AIDetector:
    def __init__(self):
        """Initialize the AI detector with OpenAI client"""
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required")
        
        self.client = OpenAI(api_key=api_key)
    
    def detect_ai_content(self, text):
        """
        Analyze text to determine if it was AI-generated
        
        Args:
            text (str): The text content to analyze
            
        Returns:
            dict: Analysis results with AI probability, confidence, and reasoning
        """
        try:
            # Prepare the analysis prompt
            system_prompt = """You are an expert AI content detector. Analyze the given text and determine the probability that it was generated by an AI system (like ChatGPT, Claude, etc.) versus written by a human.

Consider these factors in your analysis:
1. Writing patterns and style consistency
2. Repetitive phrases or structures common in AI
3. Overly formal or structured language
4. Lack of personal experience or emotion
5. Generic or templated responses
6. Perfect grammar without natural human errors
7. Predictable transitions and conclusions
8. Absence of unique voice or personality

Provide your response in JSON format with:
- ai_probability: float between 0.0 and 1.0 (0 = definitely human, 1 = definitely AI)
- confidence: float between 0.0 and 1.0 indicating how confident you are in your assessment
- reasoning: string explaining your analysis and key indicators

Be thorough but concise in your reasoning."""

            user_prompt = f"Please analyze this text for AI generation:\n\n{text}"
            
            # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
            # do not change this unless explicitly requested by the user
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                response_format={"type": "json_object"},
                temperature=0.3,  # Lower temperature for more consistent analysis
                max_tokens=1000
            )
            
            # Parse the JSON response
            result = json.loads(response.choices[0].message.content)
            
            # Validate and normalize the results
            ai_probability = max(0.0, min(1.0, float(result.get('ai_probability', 0.5))))
            confidence = max(0.0, min(1.0, float(result.get('confidence', 0.5))))
            reasoning = result.get('reasoning', 'No detailed analysis provided')
            
            return {
                'ai_probability': ai_probability,
                'confidence': confidence,
                'reasoning': reasoning,
                'raw_response': result
            }
            
        except json.JSONDecodeError as e:
            raise Exception(f"Failed to parse AI detection response: {e}")
        except Exception as e:
            raise Exception(f"AI detection analysis failed: {e}")
    
    def batch_detect(self, texts):
        """
        Analyze multiple texts for AI content detection
        
        Args:
            texts (list): List of text strings to analyze
            
        Returns:
            list: List of analysis results for each text
        """
        results = []
        for i, text in enumerate(texts):
            try:
                result = self.detect_ai_content(text)
                result['index'] = i
                results.append(result)
            except Exception as e:
                results.append({
                    'index': i,
                    'error': str(e),
                    'ai_probability': 0.5,  # Default uncertain value
                    'confidence': 0.0,
                    'reasoning': f"Analysis failed: {e}"
                })
        return results

import streamlit as st
import os
from ai_detector import AIDetector
from file_processor import FileProcessor
from database import DatabaseManager
import time

# Configure page
st.set_page_config(
    page_title="GhostOrShell - AI Content Detection",
    page_icon="üëª",
    layout="wide"
)

# Initialize processors
@st.cache_resource
def init_processors():
    return AIDetector(), FileProcessor(), DatabaseManager()

def main():
    # Header
    st.title("üëª GhostOrShell")
    st.subheader("AI Content Detection Tool")
    st.markdown("Upload a document to analyze if it was generated by AI")
    
    # Create tabs
    tab1, tab2 = st.tabs(["üîç Analyze Document", "üìä Analysis History"])
    
    with tab1:
        analyze_document_tab()
    
    with tab2:
        analysis_history_tab()

def analyze_document_tab():
    # Sidebar with info
    with st.sidebar:
        st.header("‚ÑπÔ∏è About")
        st.markdown("""
        **GhostOrShell** analyzes your documents to detect AI-generated content.
        
        **Supported formats:**
        - Text files (.txt)
        - PDF documents (.pdf)
        - Word documents (.docx)
        
        **How it works:**
        1. Upload your file
        2. We extract and analyze the text
        3. Get confidence scores for AI detection
        """)
        
        # API Key status
        api_key = os.getenv("OPENAI_API_KEY")
        if api_key:
            st.success("‚úÖ OpenAI API configured")
        else:
            st.error("‚ùå OpenAI API key not found")
            st.warning("Please set OPENAI_API_KEY environment variable")
    
    # Main content area
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìÅ Upload Document")
        
        # File uploader
        uploaded_file = st.file_uploader(
            "Choose a file",
            type=["txt", "pdf", "docx"],
            help="Drag and drop a file or click to browse"
        )
        
        if uploaded_file is not None:
            # Display file info
            st.success(f"‚úÖ File uploaded: {uploaded_file.name}")
            st.info(f"File size: {uploaded_file.size / 1024:.1f} KB")
            st.info(f"File type: {uploaded_file.type}")
            
            # Process button
            if st.button("üîç Analyze for AI Content", type="primary"):
                try:
                    # Initialize processors
                    ai_detector, file_processor, db_manager = init_processors()
                    
                    # Show processing status
                    with st.spinner("Processing file..."):
                        # Extract text based on file type
                        text_content = file_processor.extract_text(uploaded_file)
                        
                        if not text_content or len(text_content.strip()) < 10:
                            st.error("‚ùå Could not extract sufficient text from the file")
                            return
                        
                        # Store results in session state
                        st.session_state.extracted_text = text_content
                        st.session_state.file_name = uploaded_file.name
                    
                    with st.spinner("Analyzing with AI detector..."):
                        # Analyze for AI content
                        detection_result = ai_detector.detect_ai_content(text_content)
                        st.session_state.detection_result = detection_result
                    
                    # Save to database
                    with st.spinner("Saving analysis..."):
                        try:
                            file_extension = uploaded_file.name.split('.')[-1].lower()
                            record_id = db_manager.save_analysis(
                                filename=uploaded_file.name,
                                file_type=file_extension,
                                file_size=uploaded_file.size,
                                text_length=len(text_content),
                                ai_probability=detection_result['ai_probability'],
                                confidence=detection_result['confidence'],
                                reasoning=detection_result['reasoning']
                            )
                            st.session_state.record_id = record_id
                        except Exception as db_error:
                            st.warning(f"Analysis complete but database save failed: {db_error}")
                    
                    st.success("‚úÖ Analysis complete and saved!")
                    
                except Exception as e:
                    st.error(f"‚ùå Error processing file: {str(e)}")
    
    with col2:
        st.header("üìä Analysis Results")
        
        # Display results if available
        if hasattr(st.session_state, 'detection_result') and st.session_state.detection_result:
            result = st.session_state.detection_result
            
            # Main result display
            st.subheader(f"Results for: {st.session_state.get('file_name', 'Unknown')}")
            
            # AI Probability Score
            ai_probability = result.get('ai_probability', 0)
            confidence = result.get('confidence', 0)
            
            # Color coding based on AI probability
            if ai_probability >= 0.7:
                result_color = "ü§ñ"
                result_text = "Likely AI-Generated"
                result_style = "color: #ff4444;"
            elif ai_probability >= 0.3:
                result_color = "‚ùì"
                result_text = "Uncertain/Mixed"
                result_style = "color: #ffaa00;"
            else:
                result_color = "üë§"
                result_text = "Likely Human-Written"
                result_style = "color: #44aa44;"
            
            # Display main result
            st.markdown(f"""
            <div style="text-align: center; padding: 20px; border-radius: 10px; background-color: #f0f2f6;">
                <h2 style="{result_style}">{result_color} {result_text}</h2>
                <h3>AI Probability: {ai_probability:.1%}</h3>
                <p>Detection Confidence: {confidence:.1%}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Detailed metrics
            st.subheader("üìà Detailed Analysis")
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("AI Probability", f"{ai_probability:.1%}")
                st.metric("Human Probability", f"{1-ai_probability:.1%}")
            
            with col_b:
                st.metric("Confidence Score", f"{confidence:.1%}")
                st.metric("Text Length", f"{len(st.session_state.get('extracted_text', ''))}")
            
            # Progress bars
            st.progress(ai_probability, text=f"AI Likelihood: {ai_probability:.1%}")
            st.progress(confidence, text=f"Confidence: {confidence:.1%}")
            
            # Analysis details
            if result.get('reasoning'):
                st.subheader("üß† Analysis Reasoning")
                st.write(result['reasoning'])
            
            # Show extracted text (truncated)
            if st.session_state.get('extracted_text'):
                with st.expander("üìÑ Extracted Text (Preview)"):
                    text_preview = st.session_state.extracted_text[:1000]
                    if len(st.session_state.extracted_text) > 1000:
                        text_preview += "..."
                    st.text_area("Content", text_preview, height=200, disabled=True)
        
        else:
            st.info("üëÜ Upload and analyze a file to see results here")

def analysis_history_tab():
    """Display analysis history and statistics"""
    try:
        ai_detector, file_processor, db_manager = init_processors()
        
        st.header("üìä Analysis History & Statistics")
        
        # Get statistics
        try:
            stats = db_manager.get_analysis_stats()
            
            # Display key metrics
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Total Analyses", stats['total_analyses'])
            
            with col2:
                st.metric("AI Detected", f"{stats['ai_detected']} ({stats['ai_percentage']:.1f}%)")
            
            with col3:
                st.metric("Human Detected", f"{stats['human_detected']} ({stats['human_percentage']:.1f}%)")
            
            with col4:
                st.metric("Avg Confidence", f"{stats['average_confidence']:.1%}")
            
            # File type distribution
            if stats['file_type_distribution']:
                st.subheader("üìÅ File Type Distribution")
                file_types = list(stats['file_type_distribution'].keys())
                file_counts = list(stats['file_type_distribution'].values())
                
                col_chart, col_table = st.columns([2, 1])
                
                with col_chart:
                    st.bar_chart(dict(zip(file_types, file_counts)))
                
                with col_table:
                    st.write("**File Types:**")
                    for ft, count in stats['file_type_distribution'].items():
                        st.write(f"‚Ä¢ {ft}: {count}")
            
        except Exception as e:
            st.error(f"Error loading statistics: {e}")
        
        # Recent analyses
        st.subheader("üìù Recent Analyses")
        
        try:
            recent_analyses = db_manager.get_recent_analyses(limit=20)
            
            if recent_analyses:
                # Create a table of recent analyses
                for i, record in enumerate(recent_analyses):
                    with st.expander(f"{record.filename} - {record.created_at.strftime('%Y-%m-%d %H:%M')}"):
                        col_info, col_result = st.columns([1, 1])
                        
                        with col_info:
                            st.write(f"**File:** {record.filename}")
                            st.write(f"**Type:** {record.file_type}")
                            st.write(f"**Size:** {record.file_size / 1024:.1f} KB")
                            st.write(f"**Text Length:** {record.text_length} chars")
                            st.write(f"**Date:** {record.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
                        
                        with col_result:
                            ai_prob = record.ai_probability
                            confidence = record.confidence
                            
                            if ai_prob >= 0.7:
                                result_text = "ü§ñ Likely AI-Generated"
                                color = "red"
                            elif ai_prob >= 0.3:
                                result_text = "‚ùì Uncertain/Mixed"
                                color = "orange"
                            else:
                                result_text = "üë§ Likely Human-Written"
                                color = "green"
                            
                            st.write(f"**Result:** {result_text}")
                            st.write(f"**AI Probability:** {ai_prob:.1%}")
                            st.write(f"**Confidence:** {confidence:.1%}")
                            
                            # Progress bars
                            st.progress(ai_prob, text=f"AI Likelihood: {ai_prob:.1%}")
                            st.progress(confidence, text=f"Confidence: {confidence:.1%}")
                        
                        if record.reasoning:
                            st.write("**Analysis Reasoning:**")
                            st.write(record.reasoning)
            else:
                st.info("No analyses found. Upload and analyze some documents to see history here.")
                
        except Exception as e:
            st.error(f"Error loading recent analyses: {e}")
            
        # Database management
        st.subheader("üóÑÔ∏è Database Management")
        
        col_clean, col_stats = st.columns(2)
        
        with col_clean:
            if st.button("üßπ Clean Old Records (30+ days)"):
                try:
                    deleted = db_manager.delete_old_records(days_old=30)
                    st.success(f"Deleted {deleted} old records")
                except Exception as e:
                    st.error(f"Error cleaning records: {e}")
        
        with col_stats:
            if st.button("üîÑ Refresh Statistics"):
                st.rerun()
                
    except Exception as e:
        st.error(f"Database connection error: {e}")
        st.info("Make sure the database is properly configured.")

if __name__ == "__main__":
    main()

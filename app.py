import streamlit as st
import os
from ai_detector import AIDetector
from file_processor import FileProcessor
import time

# Configure page
st.set_page_config(
    page_title="GhostOrShell - AI Content Detection",
    page_icon="üëª",
    layout="wide"
)

# Initialize processors
@st.cache_resource
def init_processors():
    return AIDetector(), FileProcessor()

def main():
    # Header
    st.title("üëª GhostOrShell")
    st.subheader("AI Content Detection Tool")
    st.markdown("Upload a document to analyze if it was generated by AI")
    
    # Sidebar with info
    with st.sidebar:
        st.header("‚ÑπÔ∏è About")
        st.markdown("""
        **GhostOrShell** analyzes your documents to detect AI-generated content.
        
        **Supported formats:**
        - Text files (.txt)
        - PDF documents (.pdf)
        - Images (.jpg, .png, .jpeg)
        
        **How it works:**
        1. Upload your file
        2. We extract and analyze the text
        3. Get confidence scores for AI detection
        """)
        
        # API Key status
        api_key = os.getenv("OPENAI_API_KEY")
        if api_key:
            st.success("‚úÖ OpenAI API configured")
        else:
            st.error("‚ùå OpenAI API key not found")
            st.warning("Please set OPENAI_API_KEY environment variable")
    
    # Main content area
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìÅ Upload Document")
        
        # File uploader
        uploaded_file = st.file_uploader(
            "Choose a file",
            type=["txt", "pdf", "jpg", "jpeg", "png"],
            help="Drag and drop a file or click to browse"
        )
        
        if uploaded_file is not None:
            # Display file info
            st.success(f"‚úÖ File uploaded: {uploaded_file.name}")
            st.info(f"File size: {uploaded_file.size / 1024:.1f} KB")
            st.info(f"File type: {uploaded_file.type}")
            
            # Process button
            if st.button("üîç Analyze for AI Content", type="primary"):
                try:
                    # Initialize processors
                    ai_detector, file_processor = init_processors()
                    
                    # Show processing status
                    with st.spinner("Processing file..."):
                        # Extract text based on file type
                        text_content = file_processor.extract_text(uploaded_file)
                        
                        if not text_content or len(text_content.strip()) < 10:
                            st.error("‚ùå Could not extract sufficient text from the file")
                            return
                        
                        # Store results in session state
                        st.session_state.extracted_text = text_content
                        st.session_state.file_name = uploaded_file.name
                    
                    with st.spinner("Analyzing with AI detector..."):
                        # Analyze for AI content
                        detection_result = ai_detector.detect_ai_content(text_content)
                        st.session_state.detection_result = detection_result
                    
                    st.success("‚úÖ Analysis complete!")
                    
                except Exception as e:
                    st.error(f"‚ùå Error processing file: {str(e)}")
    
    with col2:
        st.header("üìä Analysis Results")
        
        # Display results if available
        if hasattr(st.session_state, 'detection_result') and st.session_state.detection_result:
            result = st.session_state.detection_result
            
            # Main result display
            st.subheader(f"Results for: {st.session_state.get('file_name', 'Unknown')}")
            
            # AI Probability Score
            ai_probability = result.get('ai_probability', 0)
            confidence = result.get('confidence', 0)
            
            # Color coding based on AI probability
            if ai_probability >= 0.7:
                result_color = "ü§ñ"
                result_text = "Likely AI-Generated"
                result_style = "color: #ff4444;"
            elif ai_probability >= 0.3:
                result_color = "‚ùì"
                result_text = "Uncertain/Mixed"
                result_style = "color: #ffaa00;"
            else:
                result_color = "üë§"
                result_text = "Likely Human-Written"
                result_style = "color: #44aa44;"
            
            # Display main result
            st.markdown(f"""
            <div style="text-align: center; padding: 20px; border-radius: 10px; background-color: #f0f2f6;">
                <h2 style="{result_style}">{result_color} {result_text}</h2>
                <h3>AI Probability: {ai_probability:.1%}</h3>
                <p>Detection Confidence: {confidence:.1%}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Detailed metrics
            st.subheader("üìà Detailed Analysis")
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("AI Probability", f"{ai_probability:.1%}")
                st.metric("Human Probability", f"{1-ai_probability:.1%}")
            
            with col_b:
                st.metric("Confidence Score", f"{confidence:.1%}")
                st.metric("Text Length", f"{len(st.session_state.get('extracted_text', ''))}")
            
            # Progress bars
            st.progress(ai_probability, text=f"AI Likelihood: {ai_probability:.1%}")
            st.progress(confidence, text=f"Confidence: {confidence:.1%}")
            
            # Analysis details
            if result.get('reasoning'):
                st.subheader("üß† Analysis Reasoning")
                st.write(result['reasoning'])
            
            # Show extracted text (truncated)
            if st.session_state.get('extracted_text'):
                with st.expander("üìÑ Extracted Text (Preview)"):
                    text_preview = st.session_state.extracted_text[:1000]
                    if len(st.session_state.extracted_text) > 1000:
                        text_preview += "..."
                    st.text_area("Content", text_preview, height=200, disabled=True)
        
        else:
            st.info("üëÜ Upload and analyze a file to see results here")

if __name__ == "__main__":
    main()
